{"includedArchiveIdentifiers":["QsSwift"],"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/delimiter\/split(input:)","title":"func split(input: String) -> [String]","type":"method"}],"path":"\/documentation\/qsswift\/delimiter","title":"Delimiter","type":"protocol"},{"path":"\/documentation\/qsswift\/filter","title":"Filter","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeoptions\/init(allowdots:decoder:legacydecoder:decodedotinkeys:allowemptylists:allowsparselists:listlimit:charset:charsetsentinel:comma:delimiter:depth:parameterlimit:duplicates:ignorequeryprefix:interpretnumericentities:parselists:strictdepth:strict-2eaj5","title":"init(allowDots: Bool?, decoder: ScalarDecoder?, legacyDecoder: LegacyDecoder?, decodeDotInKeys: Bool?, allowEmptyLists: Bool, allowSparseLists: Bool, listLimit: Int, charset: String.Encoding, charsetSentinel: Bool, comma: Bool, delimiter: any Delimiter, depth: Int, parameterLimit: Int, duplicates: Duplicates, ignoreQueryPrefix: Bool, interpretNumericEntities: Bool, parseLists: Bool, strictDepth: Bool, strictNullHandling: Bool, throwOnLimitExceeded: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeoptions\/allowemptylists","title":"let allowEmptyLists: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/allowsparselists","title":"let allowSparseLists: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/charset","title":"let charset: String.Encoding","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/charsetsentinel","title":"let charsetSentinel: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/comma","title":"let comma: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/delimiter","title":"let delimiter: any Delimiter","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/depth","title":"let depth: Int","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/duplicates","title":"let duplicates: Duplicates","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/getallowdots","title":"var getAllowDots: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/getdecodedotinkeys","title":"var getDecodeDotInKeys: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/ignorequeryprefix","title":"let ignoreQueryPrefix: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/interpretnumericentities","title":"let interpretNumericEntities: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/listlimit","title":"let listLimit: Int","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/parameterlimit","title":"let parameterLimit: Int","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/parselists","title":"let parseLists: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/strictdepth","title":"let strictDepth: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/strictnullhandling","title":"let strictNullHandling: Bool","type":"property"},{"path":"\/documentation\/qsswift\/decodeoptions\/throwonlimitexceeded","title":"let throwOnLimitExceeded: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeoptions\/copy(allowdots:decoder:legacydecoder:decodedotinkeys:allowemptylists:allowsparselists:listlimit:charset:charsetsentinel:comma:delimiter:depth:parameterlimit:duplicates:ignorequeryprefix:interpretnumericentities:parselists:strictdepth:strict-6raum","title":"func copy(allowDots: Bool?, decoder: ScalarDecoder?, legacyDecoder: LegacyDecoder?, decodeDotInKeys: Bool?, allowEmptyLists: Bool?, allowSparseLists: Bool?, listLimit: Int?, charset: String.Encoding?, charsetSentinel: Bool?, comma: Bool?, delimiter: (any Delimiter)?, depth: Int?, parameterLimit: Int?, duplicates: Duplicates?, ignoreQueryPrefix: Bool?, interpretNumericEntities: Bool?, parseLists: Bool?, strictDepth: Bool?, strictNullHandling: Bool?, throwOnLimitExceeded: Bool?) -> DecodeOptions","type":"method"},{"path":"\/documentation\/qsswift\/decodeoptions\/decodekey(_:charset:)","title":"func decodeKey(String?, charset: String.Encoding?) -> String?","type":"method"},{"path":"\/documentation\/qsswift\/decodeoptions\/decodevalue(_:charset:)","title":"func decodeValue(String?, charset: String.Encoding?) -> Any?","type":"method"},{"path":"\/documentation\/qsswift\/decodeoptions\/getdecoder(_:charset:)","title":"func getDecoder(String?, charset: String.Encoding?) -> Any?","type":"method"}],"path":"\/documentation\/qsswift\/decodeoptions","title":"DecodeOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodedmap\/init(_:)","title":"init([String : Any])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodedmap\/value","title":"let value: [String : Any]","type":"property"}],"path":"\/documentation\/qsswift\/decodedmap","title":"DecodedMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeoptions\/init(encoder:dateserializer:listformat:indices:allowdots:addqueryprefix:allowemptylists:charset:charsetsentinel:delimiter:encode:encodedotinkeys:encodevaluesonly:format:filter:skipnulls:strictnullhandling:commaroundtrip:sort:)","title":"init(encoder: ValueEncoder?, dateSerializer: DateSerializer?, listFormat: ListFormat?, indices: Bool?, allowDots: Bool?, addQueryPrefix: Bool, allowEmptyLists: Bool, charset: String.Encoding, charsetSentinel: Bool, delimiter: String, encode: Bool, encodeDotInKeys: Bool, encodeValuesOnly: Bool, format: Format, filter: (any Filter)?, skipNulls: Bool, strictNullHandling: Bool, commaRoundTrip: Bool?, sort: Sorter?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeoptions\/addqueryprefix","title":"let addQueryPrefix: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/allowemptylists","title":"let allowEmptyLists: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/charset","title":"let charset: String.Encoding","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/charsetsentinel","title":"let charsetSentinel: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/commaroundtrip","title":"let commaRoundTrip: Bool?","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/delimiter","title":"let delimiter: String","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/encode","title":"let encode: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/encodedotinkeys","title":"let encodeDotInKeys: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/encodevaluesonly","title":"let encodeValuesOnly: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/filter","title":"let filter: (any Filter)?","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/format","title":"let format: Format","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/formatter","title":"var formatter: Formatter","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/getallowdots","title":"var getAllowDots: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/getlistformat","title":"var getListFormat: ListFormat","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/indices","title":"var indices: Bool?","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/skipnulls","title":"let skipNulls: Bool","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/sort","title":"let sort: Sorter?","type":"property"},{"path":"\/documentation\/qsswift\/encodeoptions\/strictnullhandling","title":"let strictNullHandling: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeoptions\/copy(encoder:dateserializer:listformat:indices:allowdots:addqueryprefix:allowemptylists:charset:charsetsentinel:delimiter:encode:encodedotinkeys:encodevaluesonly:format:filter:skipnulls:strictnullhandling:commaroundtrip:sort:)","title":"func copy(encoder: ValueEncoder??, dateSerializer: DateSerializer??, listFormat: ListFormat??, indices: Bool??, allowDots: Bool??, addQueryPrefix: Bool?, allowEmptyLists: Bool?, charset: String.Encoding?, charsetSentinel: Bool?, delimiter: String?, encode: Bool?, encodeDotInKeys: Bool?, encodeValuesOnly: Bool?, format: Format?, filter: (any Filter)??, skipNulls: Bool?, strictNullHandling: Bool?, commaRoundTrip: Bool??, sort: Sorter??) -> EncodeOptions","type":"method"},{"path":"\/documentation\/qsswift\/encodeoptions\/getdateserializer(_:)","title":"func getDateSerializer(Date) -> String","type":"method"},{"path":"\/documentation\/qsswift\/encodeoptions\/getencoder(_:charset:format:)","title":"func getEncoder(Any?, charset: String.Encoding?, format: Format?) -> String","type":"method"}],"path":"\/documentation\/qsswift\/encodeoptions","title":"EncodeOptions","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/formatter\/init(apply:)","title":"init(apply: (String) -> String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/formatter\/apply","title":"let apply: (String) -> String","type":"property"}],"path":"\/documentation\/qsswift\/formatter","title":"Formatter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/functionfilter\/init(_:)","title":"init((String, Any?) -> Any?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/functionfilter\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/qsswift\/functionfilter\/function","title":"let function: (String, Any?) -> Any?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/functionfilter\/excluding(_:)","title":"static func excluding((String) -> Bool) -> FunctionFilter","type":"method"},{"path":"\/documentation\/qsswift\/functionfilter\/including(_:)","title":"static func including((String) -> Bool) -> FunctionFilter","type":"method"},{"path":"\/documentation\/qsswift\/functionfilter\/transforming(_:)","title":"static func transforming([String : (Any?) -> Any?]) -> FunctionFilter","type":"method"}],"path":"\/documentation\/qsswift\/functionfilter","title":"FunctionFilter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/iterablefilter\/init(_:)-4m3ri","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/qsswift\/iterablefilter\/init(_:)-752kk","title":"init([Any])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/iterablefilter\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/qsswift\/iterablefilter\/iterable","title":"let iterable: [Any]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/iterablefilter\/indices(_:)","title":"static func indices(Int...) -> IterableFilter","type":"method"},{"path":"\/documentation\/qsswift\/iterablefilter\/keys(_:)","title":"static func keys(String...) -> IterableFilter","type":"method"},{"path":"\/documentation\/qsswift\/iterablefilter\/mixed(_:)","title":"static func mixed(Any...) -> IterableFilter","type":"method"}],"path":"\/documentation\/qsswift\/iterablefilter","title":"IterableFilter","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/==(_:_:)","title":"static func == (RegexDelimiter, RegexDelimiter) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/init(_:)","title":"init(String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/pattern","title":"let pattern: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/split(input:)","title":"func split(input: String) -> [String]","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/commaorsemicolon","title":"static let commaOrSemicolon: RegexDelimiter","type":"property"},{"path":"\/documentation\/qsswift\/regexdelimiter\/semicolonwithwhitespace","title":"static let semicolonWithWhitespace: RegexDelimiter","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/regexdelimiter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/regexdelimiter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/regexdelimiter","title":"RegexDelimiter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/stringdelimiter\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/stringdelimiter\/value","title":"let value: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/stringdelimiter\/split(input:)","title":"func split(input: String) -> [String]","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/stringdelimiter\/ampersand","title":"static let ampersand: StringDelimiter","type":"property"},{"path":"\/documentation\/qsswift\/stringdelimiter\/comma","title":"static let comma: StringDelimiter","type":"property"},{"path":"\/documentation\/qsswift\/stringdelimiter\/semicolon","title":"static let semicolon: StringDelimiter","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/stringdelimiter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/stringdelimiter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/stringdelimiter","title":"StringDelimiter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/init()","title":"init()","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/instance","title":"static let instance: Undefined","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/callasfunction()","title":"static func callAsFunction() -> Undefined","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/qsswift\/undefined\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/qsswift\/undefined\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/undefined\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/undefined\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/undefined","title":"Undefined","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/dateserializer","title":"DateSerializer","type":"typealias"},{"path":"\/documentation\/qsswift\/legacydecoder","title":"LegacyDecoder","type":"typealias"},{"path":"\/documentation\/qsswift\/listformatgenerator","title":"ListFormatGenerator","type":"typealias"},{"path":"\/documentation\/qsswift\/scalardecoder","title":"ScalarDecoder","type":"typealias"},{"path":"\/documentation\/qsswift\/sorter","title":"Sorter","type":"typealias"},{"path":"\/documentation\/qsswift\/valueencoder","title":"ValueEncoder","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/depthexceeded(maxdepth:)","title":"case depthExceeded(maxDepth: Int)","type":"case"},{"path":"\/documentation\/qsswift\/decodeerror\/listlimitexceeded(limit:)","title":"case listLimitExceeded(limit: Int)","type":"case"},{"path":"\/documentation\/qsswift\/decodeerror\/parameterlimitexceeded(limit:)","title":"case parameterLimitExceeded(limit: Int)","type":"case"},{"path":"\/documentation\/qsswift\/decodeerror\/parameterlimitnotpositive","title":"case parameterLimitNotPositive","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/userinfolimitkey","title":"static let userInfoLimitKey: String","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/userinfomaxdepthkey","title":"static let userInfoMaxDepthKey: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/errorcode","title":"var errorCode: Int","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/erroruserinfo","title":"var errorUserInfo: [String : Any]","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/errordomain","title":"static var errorDomain: String","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/errordomain-4kaf4","title":"static var errorDomain: String","type":"property"}],"path":"\/documentation\/qsswift\/decodeerror\/customnserror-implementations","title":"CustomNSError Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/decodeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/qsswift\/decodeerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodeerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/qsswift\/decodeerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/qsswift\/decodeerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/decodeerror","title":"DecodeError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/key","title":"case key","type":"case"},{"path":"\/documentation\/qsswift\/decodekind\/value","title":"case value","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/decodekind\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/decodekind\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/qsswift\/decodekind\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/decodekind","title":"DecodeKind","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/duplicates\/combine","title":"case combine","type":"case"},{"path":"\/documentation\/qsswift\/duplicates\/first","title":"case first","type":"case"},{"path":"\/documentation\/qsswift\/duplicates\/last","title":"case last","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/duplicates\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/duplicates\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/duplicates\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/duplicates","title":"Duplicates","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/cyclicobject","title":"case cyclicObject","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/errorcode","title":"var errorCode: Int","type":"property"},{"path":"\/documentation\/qsswift\/encodeerror\/erroruserinfo","title":"var errorUserInfo: [String : Any]","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/errordomain","title":"static var errorDomain: String","type":"property"},{"path":"\/documentation\/qsswift\/encodeerror\/errordomain-9wm5v","title":"static var errorDomain: String","type":"property"}],"path":"\/documentation\/qsswift\/encodeerror\/customnserror-implementations","title":"CustomNSError Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/encodeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/qsswift\/encodeerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/encodeerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/qsswift\/encodeerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/qsswift\/encodeerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/qsswift\/encodeerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/qsswift\/encodeerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/encodeerror","title":"EncodeError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/format\/rfc1738","title":"case rfc1738","type":"case"},{"path":"\/documentation\/qsswift\/format\/rfc3986","title":"case rfc3986","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/format\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/qsswift\/format\/formatter","title":"var formatter: Formatter","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/format\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/format\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/format","title":"Format","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/listformat\/brackets","title":"case brackets","type":"case"},{"path":"\/documentation\/qsswift\/listformat\/comma","title":"case comma","type":"case"},{"path":"\/documentation\/qsswift\/listformat\/indices","title":"case indices","type":"case"},{"path":"\/documentation\/qsswift\/listformat\/repeatkey","title":"case repeatKey","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/listformat\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/qsswift\/listformat\/generator","title":"var generator: ListFormatGenerator","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/listformat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/listformat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/listformat","title":"ListFormat","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/qs\/decode(_:options:)","title":"static func decode(Any?, options: DecodeOptions) throws -> [String : Any]","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeasync(_:options:qos:)","title":"static func decodeAsync(Any?, options: DecodeOptions, qos: DispatchQoS.QoSClass) async throws -> DecodedMap","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeasynconmain(_:options:qos:)","title":"static func decodeAsyncOnMain(Any?, options: DecodeOptions, qos: DispatchQoS.QoSClass) async throws -> DecodedMap","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeasyncvalue(_:options:qos:)","title":"static func decodeAsyncValue(Any?, options: DecodeOptions, qos: DispatchQoS.QoSClass) async throws -> [String : Any]","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeor(_:options:default:)","title":"static func decodeOr(Any?, options: DecodeOptions, default: [String : Any]) -> [String : Any]","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeorempty(_:options:)","title":"static func decodeOrEmpty(Any?, options: DecodeOptions) -> [String : Any]","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decodeornil(_:options:)","title":"static func decodeOrNil(Any?, options: DecodeOptions) -> [String : Any]?","type":"method"},{"path":"\/documentation\/qsswift\/qs\/decoderesult(_:options:)","title":"static func decodeResult(Any?, options: DecodeOptions) -> Result<[String : Any], any Error>","type":"method"},{"path":"\/documentation\/qsswift\/qs\/encode(_:options:)","title":"static func encode(Any?, options: EncodeOptions) throws -> String","type":"method"},{"path":"\/documentation\/qsswift\/qs\/encodeorempty(_:options:)","title":"static func encodeOrEmpty(Any?, options: EncodeOptions) -> String","type":"method"},{"path":"\/documentation\/qsswift\/qs\/encodeornil(_:options:)","title":"static func encodeOrNil(Any?, options: EncodeOptions) -> String?","type":"method"}],"path":"\/documentation\/qsswift\/qs","title":"Qs","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/qsswift\/sentinel\/charset","title":"case charset","type":"case"},{"path":"\/documentation\/qsswift\/sentinel\/iso","title":"case iso","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/sentinel\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/qsswift\/sentinel\/encoded","title":"var encoded: String","type":"property"},{"path":"\/documentation\/qsswift\/sentinel\/value","title":"var value: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/qsswift\/sentinel\/charsetstring","title":"static let charsetString: String","type":"property"},{"path":"\/documentation\/qsswift\/sentinel\/isostring","title":"static let isoString: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/qsswift\/sentinel\/forcharset(_:)","title":"static func forCharset(String.Encoding) -> Sentinel?","type":"method"},{"path":"\/documentation\/qsswift\/sentinel\/match(encodedpart:caseinsensitive:)","title":"static func match(encodedPart: String, caseInsensitive: Bool) -> Sentinel?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/qsswift\/sentinel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/qsswift\/sentinel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/qsswift\/sentinel","title":"Sentinel","type":"enum"}],"path":"\/documentation\/qsswift","title":"QsSwift","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}