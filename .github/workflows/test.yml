name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

permissions:
  contents: read

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Code style (SwiftPM) + cache warmup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-15
            swift: '6.1'
            xcode: '16.3'
          - os: macos-14
            swift: '5.10'
            xcode: '15.4'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Show Swift version (runner default)
        run: swift --version
      - name: Build (debug)
        run: swift build --disable-sandbox

  tests:
    name: Swift tests + coverage (${{ matrix.os }}, Swift ${{ matrix.swift }})
    runs-on: ${{ matrix.os }}
    needs: style
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-15
            swift: '6.1'
            xcode: '16.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode ${{ matrix.xcode }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Show Swift toolchain
        run: swift --version

      - name: Run tests with coverage
        env:
          SKIP_EXPENSIVE_TESTS: 1
          SWIFT_DETERMINISTIC_HASHING: 1
        run: bash scripts/coverage.sh

      - name: Collect macOS crash logs
        if: ${{ failure() }}
        run: |
          set -euxo pipefail
          mkdir -p crashlogs
          # Where crash logs usually live
          USER_DR="$HOME/Library/Logs/DiagnosticReports"
          SYS_DR="/Library/Logs/DiagnosticReports"

          # List what’s there (for debugging)
          for dir in "$USER_DR" "$SYS_DR"; do
            if [ -d "$dir" ]; then
              echo "=== Listing $dir ==="
              ls -lah "$dir" || true
            fi
          done

          # Copy recent crash-like files (last 60 minutes, multiple extensions)
          for dir in "$USER_DR" "$SYS_DR"; do
            if [ -d "$dir" ]; then
              # Use sudo for system dir; it’s allowed on macOS runners
              CP="cp"
              if [ "$dir" = "$SYS_DR" ]; then CP="sudo cp"; fi

              find "$dir" -type f \
                \( -name '*.crash' -o -name '*.ips' -o -name '*.hang' -o -name '*.spin' \) \
                -mmin -60 -print -exec $CP {} crashlogs/ \; || true
            fi
          done

          # Always include a unified log snippet around the failure time (very helpful when no .crash exists)
          /usr/bin/log show --style syslog --last 30m \
            --predicate 'eventMessage CONTAINS[c] "xctest" OR process CONTAINS[c] "xctest" OR process CONTAINS[c] "swift"' \
            > crashlogs/unified-log.txt 2>/dev/null || true

          echo "Collected files:"
          ls -lah crashlogs || true

      - name: Upload macOS crash logs (if any)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: macOS-crashlogs-xcode-${{ matrix.xcode }}-swift-${{ matrix.swift }}
          path: crashlogs
          if-no-files-found: ignore

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage/info.lcov
          flags: swift,${{ matrix.os }},swift-${{ matrix.swift }}
          name: QsSwift-${{ matrix.os }}-swift-${{ matrix.swift }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
