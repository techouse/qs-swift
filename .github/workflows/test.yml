name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

permissions:
  contents: read

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  XCODE_VERSION: '16.3'
  SWIFT_VERSION: '6.1'

jobs:
  analyze:
    permissions:
      contents: read
    name: SwiftLint
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show Xcode & Swift versions
        run: |
          xcodebuild -version
          swift --version

      - name: Install SwiftLint
        run: |
          set -euo pipefail
          brew update
          brew install swiftlint
          swiftlint version

      - name: Run SwiftLint
        run: |
          set -euo pipefail
          swiftlint lint --reporter github-actions-logging

  macos-tests:
    permissions:
      contents: read
    name: ${{ format('Swift tests ({0}, Xcode {1}, Swift {2}{3})', matrix.runner, matrix.xcode, matrix.swift, matrix.experimental && ' — experimental' || '') }}
    timeout-minutes: 45
    runs-on: ${{ matrix.runner }}
    needs: analyze
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-15
            xcode: '16.3'
            swift: '6.1'
            experimental: false
          - runner: macos-26
            xcode: '26'
            swift: '6.2'
            experimental: true

    env:
      XCODE_VERSION: ${{ matrix.xcode }}
      SWIFT_VERSION: ${{ matrix.swift }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show Xcode & Swift versions
        run: |
          xcodebuild -version
          swift --version

      - name: Experimental macOS 26 notice
        if: ${{ matrix.experimental }}
        run: echo "::warning::Using macos-26 runner (public preview). This job is marked experimental and allowed to fail."

      - name: Cache SwiftPM artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: spm-${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-

      - name: Run tests with coverage
        env:
          SKIP_EXPENSIVE_TESTS: 1
          SWIFT_DETERMINISTIC_HASHING: 1
        run: bash scripts/coverage.sh

      - name: Collect macOS crash logs
        if: ${{ failure() }}
        run: bash scripts/collect-macos-crashlogs.sh crashlogs

      - name: Upload macOS crash logs (if any)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v5
        with:
          name: macOS-crashlogs-${{ matrix.runner }}-xcode-${{ env.XCODE_VERSION }}-swift-${{ env.SWIFT_VERSION }}
          path: crashlogs
          if-no-files-found: ignore

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage/info.lcov
          flags: swift,${{ matrix.runner }},xcode-${{ env.XCODE_VERSION }},swift-${{ env.SWIFT_VERSION }}
          name: QsSwift-${{ matrix.runner }}-xcode-${{ env.XCODE_VERSION }}-swift-${{ env.SWIFT_VERSION }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  objc-tests:
    permissions:
      contents: read
    name: Objective-C E2E tests (macOS, Xcode)
    timeout-minutes: 45
    runs-on: macos-latest
    needs: [ analyze, macos-tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show Xcode & Swift versions
        run: |
          xcodebuild -version
          swift --version

      - name: Warn if Swift toolchain doesn’t match env.SWIFT_VERSION
        run: |
          set -euo pipefail
          swift --version | tee swift-version.txt
          if ! swift --version | grep -q "${{ env.SWIFT_VERSION }}"; then
            echo "::warning::Swift toolchain version differs from SWIFT_VERSION=${{ env.SWIFT_VERSION }}."
          fi

      - name: Work around stale local SwiftPM path (symlink)
        run: |
          set -euxo pipefail
          # Some SPM/Xcode setups expect the package folder name "QsSwift" (package name)
          # while the repo slug is "qs-swift"; create/refresh a sibling symlink to avoid stale paths.
          ACTUAL="${GITHUB_WORKSPACE}"
          PARENT="$(dirname "$ACTUAL")"
          EXPECTED="${PARENT}/QsSwift"
          if ! test -w "$PARENT"; then
            echo "Parent $PARENT not writable; skipping symlink workaround."
            exit 0
          fi
          mkdir -p "$PARENT"
          # Idempotent: force-create/refresh the symlink
          if [ -e "$EXPECTED" ] && [ ! -L "$EXPECTED" ]; then
            echo "Error: $EXPECTED exists and is not a symlink. Refusing to remove it." >&2
            exit 1
          fi
          if [ -L "$EXPECTED" ]; then
            TARGET="$(readlink "$EXPECTED")"
            if [ "$TARGET" != "$ACTUAL" ]; then
              echo "Refreshing symlink: $EXPECTED -> $ACTUAL (was $TARGET)"
            fi
          fi
          ln -sfn "$ACTUAL" "$EXPECTED"
          ls -lah "$PARENT" || true
          ls -lah "$EXPECTED" || true

      - name: Cache SPM (Xcode)
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Developer/Xcode/DerivedData/SourcePackages
            .derivedData-objc/SourcePackages
          key: spm-${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-swift-${{ env.SWIFT_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-swift-${{ env.SWIFT_VERSION }}-

      - name: Resolve SPM dependencies (ObjC test project)
        run: |
          set -euxo pipefail
          xcodebuild \
            -project ObjCE2ETests/ObjCE2ETests.xcodeproj \
            -scheme ObjCE2ETests \
            -derivedDataPath .derivedData-objc \
            -resolvePackageDependencies

      - name: Run Objective-C tests (macOS)
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -euxo pipefail
          xcodebuild -quiet \
            -project ObjCE2ETests/ObjCE2ETests.xcodeproj \
            -scheme ObjCE2ETests \
            -configuration Debug \
            -derivedDataPath .derivedData-objc \
            -destination "platform=macOS" -sdk macosx \
            CODE_SIGNING_ALLOWED=NO \
            -disableAutomaticPackageResolution \
            -enableCodeCoverage YES \
            -resultBundlePath ObjC-Tests.xcresult \
            test

      - name: Zip .xcresult and extract xccov JSON
        run: |
          set -euxo pipefail
          test -d ObjC-Tests.xcresult
          /usr/bin/zip -qry ObjC-Tests.xcresult.zip ObjC-Tests.xcresult
          xcrun xccov view --report --json ObjC-Tests.xcresult > objc-coverage.json

      - name: Upload Objective-C coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: |
            ${{ github.workspace }}/ObjC-Tests.xcresult.zip
            ${{ github.workspace }}/objc-coverage.json
          flags: objc,macos-latest,xcode-${{ env.XCODE_VERSION }}
          name: QsSwift-ObjC-macos-latest-xcode-${{ env.XCODE_VERSION }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload ObjC test result bundle
        if: ${{ always() }}
        uses: actions/upload-artifact@v5
        with:
          name: ObjC-Tests-xcode-${{ env.XCODE_VERSION }}
          path: ObjC-Tests.xcresult
          if-no-files-found: warn

      - name: Collect macOS crash logs (ObjC job)
        if: ${{ failure() }}
        run: bash scripts/collect-macos-crashlogs.sh crashlogs-objc

      - name: Upload macOS crash logs (ObjC job, if any)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v5
        with:
          name: macOS-crashlogs-objc-xcode-${{ env.XCODE_VERSION }}-macos-latest
          path: crashlogs-objc
          if-no-files-found: ignore

  linux-tests:
    permissions:
      contents: read
    name: ${{ format('Swift tests (Ubuntu, Swift {0}{1})', matrix.swift, matrix.experimental && ' — experimental' || '') }}
    runs-on: ubuntu-latest
    timeout-minutes: 40
    continue-on-error: ${{ matrix.experimental }}
    needs: analyze

    strategy:
      fail-fast: false
      matrix:
        include:
          - swift: '6.1'
            experimental: false
          - swift: '6.2'
            experimental: true

    env:
      SWIFT_VERSION: ${{ matrix.swift }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Swift ${{ env.SWIFT_VERSION }}
        # Temporarily, point to a specific commit in a fork of `swift-actions/setup-swift` that:
        #  - fixes the GPG key import
        #  - supports Swift 6.2
        uses: mman/setup-swift@ceda4ad4a25f0298db1fd6d678c9c74d9fa4d73e
        with:
          swift-version: ${{ env.SWIFT_VERSION }}

      - name: Show Swift & OS versions
        run: |
          swift --version
          uname -a

      - name: Experimental Swift notice
        if: ${{ matrix.experimental }}
        run: echo "::warning::Running Linux tests with Swift ${{ env.SWIFT_VERSION }} (experimental). This job is allowed to fail."

      - name: Cache SwiftPM artifacts (Linux)
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            .build
            ~/.cache/org.swift.swiftpm
          key: spm-${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-

      - name: Run tests (Linux)
        env:
          SKIP_EXPENSIVE_TESTS: 1
          SWIFT_DETERMINISTIC_HASHING: 1
        run: bash scripts/coverage.sh

      - name: Kernel logs on failure
        if: ${{ failure() }}
        run: |
          set -euxo pipefail
          dmesg | tail -n 200 || true

  ensure-compatibility:
    name: Ensure compatibility with qs.js
    needs: [ analyze, macos-tests ]
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Select Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show Xcode & Swift versions
        run: |
          xcodebuild -version
          swift --version

      - name: Cache SwiftPM artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            .build
            ~/Library/Caches/org.swift.swiftpm
            Tools/QsSwiftComparison/.build
          key: spm-${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-

      - name: Install Node.js (with npm cache)
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: Tools/QsSwiftComparison/js/package-lock.json

      - name: Install qs.js
        working-directory: Tools/QsSwiftComparison/js
        run: npm ci --no-audit --no-fund

      - name: Show qs.js version
        working-directory: Tools/QsSwiftComparison/js
        run: |
          node --version
          npm --version
          echo "qs version: $(node -p "require('qs/package.json').version")"

      - name: Compare Swift vs qs.js outputs (deterministic)
        working-directory: Tools/QsSwiftComparison
        env:
          SWIFT_DETERMINISTIC_HASHING: 1
          LC_ALL: C
        run: bash compare_outputs.sh
